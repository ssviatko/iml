#include "screenwidget.h"

const quint8 ScreenWidget::standard_colors[][3] = {
    { 0x00, 0x00, 0x00 }, // Black
    { 0xdd, 0x00, 0x33 }, // Deep Red
    { 0x00, 0x00, 0x99 }, // Dark Blue
    { 0xdd, 0x22, 0xdd }, // Purple
    { 0x00, 0x77, 0x22 }, // Dark Green
    { 0x55, 0x55, 0x55 }, // Dark Gray
    { 0x22, 0x22, 0xff }, // Medium Blue
    { 0x66, 0xaa, 0xff }, // Light Blue
    { 0x88, 0x55, 0x00 }, // Brown
    { 0xff, 0x66, 0x00 }, // Orange
    { 0xaa, 0xaa, 0xaa }, // Light Gray
    { 0xff, 0x99, 0x88 }, // Pink
    { 0x11, 0xdd, 0x00 }, // Light Green
    { 0xff, 0xff, 0x00 }, // Yellow
    { 0x44, 0xff, 0x99 }, // Aquamarine
    { 0xff, 0xff, 0xff }  // White
};

const quint8 ScreenWidget::char_rom[][8] = {
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 00
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 01
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 02
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 03
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 04
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 05
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 06
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 07
    { 0x00, 0x08, 0x10, 0x3e, 0x10, 0x08, 0x00, 0x00 }, // 08
    { 0x00, 0x08, 0x1c, 0x2a, 0x08, 0x08, 0x00, 0x00 }, // 09
    { 0x00, 0x08, 0x08, 0x2a, 0x1c, 0x08, 0x00, 0x00 }, // 0a
    { 0x00, 0x08, 0x04, 0x3e, 0x04, 0x08, 0x00, 0x00 }, // 0b
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 0c
    { 0x00, 0x02, 0x0a, 0x12, 0x3e, 0x10, 0x08, 0x00 }, // 0d
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 0e
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 0f
    { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }, // 10
    { 0x00, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x00, 0x00 }, // 11
    { 0x00, 0x00, 0x1f, 0x10, 0x17, 0x14, 0x14, 0x14 }, // 12
    { 0x00, 0x00, 0x3c, 0x04, 0x34, 0x14, 0x14, 0x14 }, // 13
    { 0x14, 0x14, 0x34, 0x04, 0x3c, 0x00, 0x00, 0x00 }, // 14
    { 0x14, 0x14, 0x17, 0x10, 0x1f, 0x00, 0x00, 0x00 }, // 15
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 16
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 17
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 18
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 19
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 1a
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 1b
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 1c
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 1d
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 1e
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a }, // 1f
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 20
    { 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00 }, // 21 !
    { 0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 22 "
    { 0x14, 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x14, 0x00 }, // 23 #
    { 0x08, 0x1e, 0x28, 0x1c, 0x0a, 0x3c, 0x08, 0x00 }, // 24 $
    { 0x30, 0x32, 0x04, 0x08, 0x10, 0x26, 0x06, 0x00 }, // 25 %
    { 0x18, 0x24, 0x28, 0x10, 0x2a, 0x24, 0x1a, 0x00 }, // 26 &
    { 0x18, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 27 '
    { 0x04, 0x08, 0x10, 0x10, 0x10, 0x08, 0x04, 0x00 }, // 28 (
    { 0x10, 0x08, 0x04, 0x04, 0x04, 0x08, 0x10, 0x00 }, // 29 )
    { 0x00, 0x08, 0x2a, 0x1c, 0x2a, 0x08, 0x00, 0x00 }, // 2a *
    { 0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00 }, // 2b +
    { 0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x10, 0x00 }, // 2c ,
    { 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00 }, // 2d -
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00 }, // 2e .
    { 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00 }, // 2f /
    { 0x1c, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x1c, 0x00 }, // 30 0
    { 0x08, 0x18, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00 }, // 31 1
    { 0x1c, 0x22, 0x02, 0x04, 0x08, 0x10, 0x3e, 0x00 }, // 32 2
    { 0x3e, 0x04, 0x08, 0x04, 0x02, 0x22, 0x1c, 0x00 }, // 33 3
    { 0x04, 0x0c, 0x14, 0x24, 0x3e, 0x04, 0x04, 0x00 }, // 34 4
    { 0x3e, 0x20, 0x3c, 0x02, 0x02, 0x22, 0x1c, 0x00 }, // 35 5
    { 0x0c, 0x10, 0x20, 0x3c, 0x22, 0x22, 0x1c, 0x00 }, // 36 6
    { 0x3e, 0x02, 0x04, 0x08, 0x10, 0x10, 0x10, 0x00 }, // 37 7
    { 0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c, 0x00 }, // 38 8
    { 0x1c, 0x22, 0x22, 0x1e, 0x02, 0x04, 0x18, 0x00 }, // 39 9
    { 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00 }, // 3a :
    { 0x00, 0x18, 0x18, 0x00, 0x18, 0x08, 0x10, 0x00 }, // 3b ;
    { 0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00 }, // 3c >
    { 0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00 }, // 3d =
    { 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00 }, // 3e <
    { 0x1c, 0x22, 0x02, 0x04, 0x08, 0x00, 0x08, 0x00 }, // 3f ?
    { 0x1c, 0x22, 0x02, 0x1a, 0x2a, 0x2a, 0x1c, 0x00 }, // 40 @
    { 0x1c, 0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00 }, // 41 A
    { 0x3c, 0x22, 0x22, 0x3c, 0x22, 0x22, 0x3c, 0x00 }, // 42 B
    { 0x1c, 0x22, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00 }, // 43 C
    { 0x38, 0x24, 0x22, 0x22, 0x22, 0x24, 0x38, 0x00 }, // 44 D
    { 0x3e, 0x20, 0x20, 0x3c, 0x20, 0x20, 0x3e, 0x00 }, // 45 E
    { 0x3e, 0x20, 0x20, 0x3c, 0x20, 0x20, 0x20, 0x00 }, // 46 F
    { 0x1c, 0x22, 0x20, 0x2e, 0x22, 0x22, 0x1e, 0x00 }, // 47 G
    { 0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00 }, // 48 H
    { 0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00 }, // 49 I
    { 0x0e, 0x04, 0x04, 0x04, 0x04, 0x24, 0x18, 0x00 }, // 4a J
    { 0x22, 0x24, 0x28, 0x30, 0x28, 0x24, 0x22, 0x00 }, // 4b K
    { 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3e, 0x00 }, // 4c L
    { 0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00 }, // 4d M
    { 0x22, 0x22, 0x32, 0x2a, 0x26, 0x22, 0x22, 0x00 }, // 4e N
    { 0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00 }, // 4f O
    { 0x3c, 0x22, 0x22, 0x3c, 0x20, 0x20, 0x20, 0x00 }, // 50 P
    { 0x1c, 0x22, 0x22, 0x22, 0x2a, 0x24, 0x1a, 0x00 }, // 51 Q
    { 0x3c, 0x22, 0x22, 0x3c, 0x28, 0x24, 0x22, 0x00 }, // 52 R
    { 0x1e, 0x20, 0x20, 0x1c, 0x02, 0x02, 0x3c, 0x00 }, // 53 S
    { 0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 }, // 54 T
    { 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00 }, // 55 U
    { 0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00 }, // 56 V
    { 0x22, 0x22, 0x22, 0x2a, 0x2a, 0x2a, 0x14, 0x00 }, // 57 W
    { 0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00 }, // 58 X
    { 0x22, 0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x00 }, // 59 Y
    { 0x3e, 0x02, 0x04, 0x08, 0x10, 0x20, 0x3e, 0x00 }, // 5a Z
    { 0x1c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1c, 0x00 }, // 5b [
    { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00 }, // 5c \ .
    { 0x1c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1c, 0x00 }, // 5d ]
    { 0x08, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 5e ^
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e }, // 5f _
    { 0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 60 `
    { 0x00, 0x00, 0x1c, 0x02, 0x1e, 0x22, 0x1e, 0x00 }, // 61 a
    { 0x20, 0x20, 0x2c, 0x32, 0x22, 0x22, 0x3c, 0x00 }, // 62 b
    { 0x00, 0x00, 0x1c, 0x20, 0x20, 0x22, 0x1c, 0x00 }, // 63 c
    { 0x02, 0x02, 0x1a, 0x26, 0x22, 0x22, 0x1e, 0x00 }, // 64 d
    { 0x00, 0x00, 0x1c, 0x22, 0x3e, 0x20, 0x1c, 0x00 }, // 65 e
    { 0x0c, 0x12, 0x10, 0x38, 0x10, 0x10, 0x10, 0x00 }, // 66 f
    { 0x00, 0x1e, 0x22, 0x22, 0x1e, 0x02, 0x1c, 0x00 }, // 67 g
    { 0x20, 0x20, 0x2c, 0x32, 0x22, 0x22, 0x22, 0x00 }, // 68 h
    { 0x08, 0x00, 0x18, 0x08, 0x08, 0x08, 0x1c, 0x00 }, // 69 i
    { 0x04, 0x00, 0x0c, 0x04, 0x04, 0x24, 0x18, 0x00 }, // 6a j
    { 0x20, 0x20, 0x24, 0x28, 0x30, 0x28, 0x24, 0x00 }, // 6b k
    { 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00 }, // 6c l
    { 0x00, 0x00, 0x34, 0x2a, 0x2a, 0x22, 0x22, 0x00 }, // 6d m
    { 0x00, 0x00, 0x2c, 0x32, 0x22, 0x22, 0x22, 0x00 }, // 6e n
    { 0x00, 0x00, 0x1c, 0x22, 0x22, 0x22, 0x1c, 0x00 }, // 6f o
    { 0x00, 0x00, 0x3c, 0x22, 0x3c, 0x20, 0x20, 0x00 }, // 70 p
    { 0x00, 0x00, 0x1a, 0x26, 0x1e, 0x02, 0x02, 0x00 }, // 71 q
    { 0x00, 0x00, 0x2c, 0x32, 0x20, 0x20, 0x20, 0x00 }, // 72 r
    { 0x00, 0x00, 0x1c, 0x20, 0x1c, 0x02, 0x3c, 0x00 }, // 73 s
    { 0x10, 0x10, 0x38, 0x10, 0x10, 0x12, 0x0c, 0x00 }, // 74 t
    { 0x00, 0x00, 0x22, 0x22, 0x22, 0x26, 0x1a, 0x00 }, // 75 u
    { 0x00, 0x00, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00 }, // 76 v
    { 0x00, 0x00, 0x22, 0x22, 0x2a, 0x2a, 0x14, 0x00 }, // 77 w
    { 0x00, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00 }, // 78 x
    { 0x00, 0x00, 0x22, 0x22, 0x1e, 0x02, 0x1c, 0x00 }, // 79 y
    { 0x00, 0x00, 0x3e, 0x04, 0x08, 0x10, 0x3e, 0x00 }, // 7a z
    { 0x04, 0x08, 0x08, 0x10, 0x08, 0x08, 0x04, 0x00 }, // 7b {
    { 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 }, // 7c |
    { 0x10, 0x08, 0x08, 0x04, 0x08, 0x08, 0x10, 0x00 }, // 7d }
    { 0x00, 0x00, 0x10, 0x2a, 0x04, 0x00, 0x00, 0x00 }, // 7e ~
    { 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a, 0x15, 0x2a } // 7f rubout
};

ScreenWidget::ScreenWidget(QWidget *parent)
    : QWidget(parent) , m_flashing(false)
{
    m_flash_countdown = m_flash_rate;

    // set up upate timer, 30 frames a second (ideally)
    m_updater = new QTimer(this);
    connect(m_updater, SIGNAL(timeout()), this, SLOT(redrawTimeout()));
    m_updater->start(33);

    // set up screen
    m_scr = new QImage(QSize(960, 544), QImage::Format_ARGB32_Premultiplied);
    QPainter l_ptr(m_scr);
    l_ptr.fillRect(0, 0, 960, 544, QColor(0, 0, 0, 0xff));
}

ScreenWidget::~ScreenWidget()
{

}

void ScreenWidget::paintEvent(QPaintEvent *event)
{
//    qDebug("paintEvent");
    if (m_scr != nullptr) {
        QPainter l_win(this);
        l_win.drawImage(0, 0, *m_scr);
    }
}

void ScreenWidget::redrawTimeout()
{
    m_flash_countdown--;
    if (m_flash_countdown < 0) {
        m_flash_countdown = m_flash_rate;
        m_flashing = !m_flashing;
        MemIOController::get().setVideoDirty();
    }

    if (!MemIOController::get().isVideoDirty())
        return;

    int l_pixel_size;
    int l_gr_w;
    int l_gr_h;
    bool l_4096;

    quint32 l_video_mode = MemIOController::get().read(MemIOController::IOSTART + MemIOController::VID_MODE);

    if (l_video_mode >= 8) {
        switch (l_video_mode) {
        case 8: // 40 x 17 text mode
            l_gr_w = 40;
            l_gr_h = 17;
            l_pixel_size = 4;
            break;
        case 9: // 80 x 34 text mode
            l_gr_w = 80;
            l_gr_h = 34;
            l_pixel_size = 2;
            break;
        default: // default to low-res
            l_gr_w = 40;
            l_gr_h = 17;
            l_pixel_size = 4;
            break;
        }
        for (int w = 0; w < l_gr_w; ++w) {
            for (int h = 0; h < l_gr_h; ++h) {
                // establish 6x8 character stencil buffer
                QImage l_charimg(QSize(l_pixel_size * 6, l_pixel_size * 8), QImage::Format_ARGB32_Premultiplied);
                QPainter l_ptr(&l_charimg);
                QPainter l_scrptr(m_scr);
                // compute base address and get character/color info out of memory
                quint32 l_baseaddr = MemIOController::VIDSTART + (h * l_gr_w * 2) + (w * 2);
                quint8 l_char = MemIOController::get().read(l_baseaddr);
                bool l_flash = l_char & 0x80;
                l_char &= 0x7f;
                quint8 l_color = MemIOController::get().read(l_baseaddr + 1) & 0x0f;
                quint8 l_backcolor = (MemIOController::get().read(l_baseaddr + 1) >> 4) & 0x0f;
                if (m_flashing && l_flash) {
                    quint8 l_temp = l_color;
                    l_color = l_backcolor;
                    l_backcolor = l_temp;
                }
                // blot out our character stencil with the background color
                l_ptr.fillRect(0, 0, l_pixel_size * 6, l_pixel_size * 8, QColor(standard_colors[l_backcolor][0], standard_colors[l_backcolor][1], standard_colors[l_backcolor][2], 0xff));
                // establish color for writing character data
                QBrush l_textbrush(QColor(standard_colors[l_color][0], standard_colors[l_color][1], standard_colors[l_color][2]));
                for (int iy = 0; iy <= 7; ++iy) {
                    for (int ix = 0; ix <= 5; ++ix) {
                        if (((char_rom[l_char][iy] << (ix + 2)) & 0x80) == 0x80) {
                            l_ptr.fillRect(ix * l_pixel_size, iy * l_pixel_size, l_pixel_size, l_pixel_size, l_textbrush);
                        }
                    }
                }
                l_scrptr.drawImage(w * 6 * l_pixel_size, h * 8 * l_pixel_size, l_charimg);

            }
        }
    } else {
        switch (l_video_mode) {
        case 0: // 120 x 68, 16 colors, 4k
            l_gr_w = 120;
            l_gr_h = 68;
            l_pixel_size = 8;
            l_4096 = false;
            break;
        case 1: // 240 x 136, 16 colors, 16k
            l_gr_w = 240;
            l_gr_h = 136;
            l_pixel_size = 4;
            l_4096 = false;
            break;
        case 2: // 480 x 272, 16 colors, 64k
            l_gr_w = 480;
            l_gr_h = 272;
            l_pixel_size = 2;
            l_4096 = false;
            break;
//        case 3: // 960 x 544, 16 colors, 256k
//            l_gr_w = 960;
//            l_gr_h = 544;
//            l_pixel_size = 1;
//            l_4096 = false;
//            break;
        case 4: // 120 x 68, 4096 colors, 16k
            l_gr_w = 120;
            l_gr_h = 68;
            l_pixel_size = 8;
            l_4096 = true;
            break;
        case 5: // 240 x 136, 4096 colors, 64k
            l_gr_w = 240;
            l_gr_h = 136;
            l_pixel_size = 4;
            l_4096 = true;
            break;
        case 6: // 480 x 272, 4096 colors, 256k
            l_gr_w = 480;
            l_gr_h = 272;
            l_pixel_size = 2;
            l_4096 = true;
            break;
            //        case 7: // 960 x 544, 4096 colors, 1MB
            //            l_gr_w = 960;
            //            l_gr_h = 544;
            //            l_pixel_size = 1;
            //            l_4096 = true;
            //            break;
        default: // anything we don't recognize behaves as mode 0
            l_gr_w = 120;
            l_gr_h = 68;
            l_pixel_size = 8;
            l_4096 = false;
            break;
        }
        for (int w = 0; w < l_gr_w; ++w) {
            for (int h = 0; h < l_gr_h; ++h) {
                quint8 l_pix_l, l_pix_h;
                quint8 l_pix_red, l_pix_green, l_pix_blue;
                if (l_4096) {
                    l_pix_l = MemIOController::get().read(MemIOController::VIDSTART + (h * (l_gr_w * 2)) + (w * 2));
                    l_pix_h = MemIOController::get().read(MemIOController::VIDSTART + (h * (l_gr_w * 2)) + (w * 2) + 1);
                    l_pix_red = ((l_pix_h & 0b00001111) << 4) + (l_pix_h & 0b00001111);
                    l_pix_green = (l_pix_l & 0b11110000) + ((l_pix_l & 0b11110000) >> 4);
                    l_pix_blue = ((l_pix_l & 0b00001111) << 4) + (l_pix_l & 0b00001111);
                } else {
                    l_pix_l = MemIOController::get().read(MemIOController::VIDSTART + (h * (l_gr_w / 2)) + (w >> 1));
                    if (w % 2)
                        l_pix_l &= 0x0f;
                    else
                        l_pix_l >>= 4;
                    l_pix_red = standard_colors[l_pix_l][0];
                    l_pix_green = standard_colors[l_pix_l][1];
                    l_pix_blue = standard_colors[l_pix_l][2];
                }
                QPainter l_ptr(m_scr);
                l_ptr.fillRect(w * l_pixel_size, h * l_pixel_size, l_pixel_size, l_pixel_size, QColor(l_pix_red, l_pix_green, l_pix_blue));
            }
        }
    }

    this->repaint();
    MemIOController::get().clearVideoDirty();
}

void ScreenWidget::keyPressEvent(QKeyEvent *event)
{
//    qDebug() << "keyPressEvent ";
    if (event->text().length() == 1) {
        char l_char = event->text().at(0).toLatin1();
        MemIOController::get().hc_register_keypress(l_char);
//        qDebug() << "(" << Qt::hex << (int)l_char << Qt::dec << ") " << l_char;
    } else {
        // key, but no text
        switch (event->key()) {
        case Qt::Key_Down:
            MemIOController::get().hc_register_keypress(0x0a);
//            qDebug() << "Down Arrow";
            break;
        case Qt::Key_Up:
            MemIOController::get().hc_register_keypress(0x09);
//            qDebug() << "Up Arrow";
            break;
        case Qt::Key_Left:
            MemIOController::get().hc_register_keypress(0x08);
//            qDebug() << "Left Arrow";
            break;
        case Qt::Key_Right:
            MemIOController::get().hc_register_keypress(0x0b);
//            qDebug() << "Right Arrow";
            break;
        default:
//            qDebug() << "unknown";
            break;
        }
    }

}
