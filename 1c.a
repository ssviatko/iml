	!to "1c.o",plain
	!cpu 65816

	*= $0000

IO_KEYQ_SIZE = $1bfc00
IO_KEYQ_WAITING = $1bfc01
IO_KEYQ_DEQUEUE = $1bfc02
IO_KEYQ_CLEAR = $1bfc03

IO_CON_CLS = $1bfc10
IO_CON_COLOR = $1bfc11
IO_CON_CHAROUT = $1bfc12
IO_CON_REGISTER = $1bfc13
IO_CON_CURSORH = $1bfc14;
IO_CON_CURSORV = $1bfc15;
IO_CON_CURSOR = $1bfc16;
IO_CON_CR = $1bfc17

IO_VIDMODE = $1bfc20

promptchar = '>'

l_getline = $1c0000 + getline
l_prinbuff = $1c0000 + prinbuff
l_prcdpla = $1c0000 + prcdpla
l_ucline = $1c0000 + ucline

scratch2 = $2a
scratch2_m = $2b
scratch2_h = $2c
alarge = $2d
xlarge = $2e
scratch1 = $2f
enterbytes = $30
enterbytes_m = $31
enterbytes_h = $32
rangehigh = $33
monrange = $35
monlast = $36
parseptr = $37
parseptr_m = $38
parseptr_h = $39
mondump = $3a
mondump_m = $3b
mondump_h = $3c
dpla = $3d
dpla_m = $3e
dpla_h = $3f

inbuff = $170400

x1crominit
	phk
	plb
	rep #$10
	!rl
	sep #$20
	!as
	ldx #initstring
	stx dpla
	lda #$1c
	sta dpla_h
	jsl l_prcdpla
	jmp+2 monstart

parse_setup
	ldx #$0400
	stx parseptr
	lda #$17
	sta parseptr_h
	rts
	
	!zone parse_getchar
parse_getchar			;get char from inbuff, assumes 8 bit A, 16 bit X
	lda [parseptr]
	pha
	inc parseptr
	bne .local2
	inc parseptr_m
	bne .local2
	inc parseptr_h
.local2
	pla
	rts
	
	!zone parse_addr
parse_addr				;see if user specified an address on line.
	lda #$00
	pha
	pha					;make space for working value on the stack
	sta monrange		;clear range flag
.throwaway
	jsr+2 parse_getchar
	cmp #' '
	beq .throwaway		;throw away leading spaces
	jsr+2 parse_getnib2	;get first nibble. call 2nd entry point since we already have character
	bcc .no				;didn't even get one hex character, so return false
	sta 1,s				;save it on the stack for now
	jsr+2 parse_getnib	;get second nibble
	bcc .yes			;if not hex then bail
	pha
	lda 2,s
	asl
	asl
	asl
	asl
	ora 1,s
	sta 2,s
	pla					;add to stack
	jsr+2 parse_getnib	;get possible third nibble
	bcc .yes
	rep #$30			;we're dealing with a 16 bit value now
	!al
	and #$000f
	pha
	lda 3,s
	asl
	asl
	asl
	asl
	ora 1,s
	sta 3,s
	pla
	sep #$20
	!as
	jsr+2 parse_getnib
	bcc .yes
	rep #$30
	!al
	and #$000f
	pha
	lda 3,s
	asl
	asl
	asl
	asl
	ora 1,s
	sta 3,s
	pla
	sep #$20			;fall thru to yes on 4th nibble
	!as
	jsr parse_getchar	;check to see if next char is a . so we can specify ranges
	cmp #'.'
	bne .yes
	lda #$80
	sta monrange
.yes
	ply					;get 16 bit work address off of stack
	sec					;got address, return
	rts
.no
	ply					;clear stack
	clc					;no address found, return
	rts
parse_getnib
	jsr parse_getchar
parse_getnib2			;enter here after we've thrown away leading spaces
	cmp #' '
	beq .outrng			;space = end of value
	cmp #'.'
	bne .notrange
	lda #$80
	sta monrange		;this is the start of a range specification
	clc
	rts
.notrange
	cmp #$41
	bcc .outrnga
	cmp #$47
	bcs .outrnga
	sec
	sbc #$07			;in range of A-F
.success
	and #$0f
	sec
	rts
.outrnga				;test if 0-9
	cmp #$30
	bcc .outrng
	cmp #$3a
	bcc .success		;less than 3a, but >= 30, else fall thru to outrng
.outrng
	clc
	rts
	
prdumpaddr
	lda mondump_h			;print long address
	jsr+2 prhex
	lda #'/'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldx mondump
	jsr+2 prhex16
	lda #'-'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #' '
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	rts
	
adjdumpaddr					;add 8 to dump address
	rep #$30
	!al
	lda mondump
	clc
	adc #$0008
	sta mondump
	sep #$20
	!as
	php						;save carry state.. did we carry to the bank?
	lda mondump_h
	adc #$00
	sta mondump_h
	plp
	rts
	
bankcmd
	jsr parse_addr
	bcc monerror
	tya
	sta mondump_h
	jmp moncmd
monerror
	ldx #monsynerr
	stx dpla
	lda #$1c
	sta dpla_h
	jsl l_prcdpla
	jmp moncmd
monsynerr
	!tx "Syntax error!"
	!byte $0d, $00

colorcmd
	jsr parse_addr
	bcc monerror
	tya
	sta IO_CON_COLOR
	jmp moncmd
	
modecmd
	jsr parse_addr
	bcc monerror
	tya
	cmp #$08
	bcc monerror
	cmp #$0a
	bcs monerror
	sta IO_VIDMODE
	lda #$00
	sta IO_CON_CURSORH
	sta IO_CON_CURSORV
	lda #$20
	sta IO_CON_CHAROUT
	sta IO_CON_CLS
	jmp moncmd
	
monstart				;main entry point for system monitor
	phk
	plb
	rep #$10
	!rl
	sep #$20
	!as
	ldx #$0000
	stx mondump
	lda #$1c
	sta mondump_h
	lda #'D'
	sta monlast
	
	!zone moncmd
moncmd
	lda #promptchar
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	jsl l_getline
	jsl l_ucline
	jsr parse_setup
	jsr parse_getchar
.local3
	cmp #'Q'
	beq haltcmd
	cmp #'D'
	bne .local4
	jmp+2 dumpcmd
.local4
	cmp #$0d
	bne .local2
	lda monlast			;recall previously executed command
	cmp #$20			;make sure it isn't a control character
	bcs .local3			;and retry it
	bra moncmd			;else recycle and try a new command
.local2
	cmp #'A'
	beq asciidumpcmd
	cmp #'B'
	bne .local5
	jmp+2 bankcmd
.local5
	cmp #'C'
	bne .local6
	jmp+2 colorcmd
.local6
	cmp #'M'
	bne .local7
	jmp+2 modecmd
.local7
	cmp #'E'
	bne .local8
	jmp+2 entercmd
.local8
	cmp #'L'
	bne .local9
	jmp+2 listcmd
.local9
	cmp #'?'
	beq helpcmd
	jmp moncmd
	
helpcmd
	ldx #helpmsg
	stx dpla
	lda #$1c
	sta dpla_h
	jsl l_prcdpla
	jmp moncmd
	
haltcmd
	ldx #haltmsg
	stx dpla
	lda #$1c
	sta dpla_h
	jsl l_prcdpla
	stp
haltmsg
	!tx "Halting 65816 engine.."
	!byte $0d,$00
	
	!zone asciidumpcmd
asciidumpcmd
	sta monlast
	jsr parse_addr
	bcc .local3
	sty mondump
	sty rangehigh
	bit monrange			;user asking for a range?
	bpl .local3
	jsr parse_addr			;get the remaining half of the range
	sty rangehigh
	lda #$80				;replace value in monrange since parse_addr will overwrite it
	sta monrange
	ldy rangehigh
	bne .local6
	jmp+2 monerror			;top of range can't be zero
.local6
	ldy mondump
	cpy rangehigh
	bcc .local3				;mondump must be less than rangehigh or it's a syntax error
	jmp+2 monerror
.local3
	jsr prdumpaddr
	ldy #$0000
.local2
	lda [mondump],y
	cmp #$20
	bcs .local4
	lda #'.'				;substitute control character with a period
.local4
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	iny
	lda IO_VIDMODE
	cmp #$09
	bne .lores1
	cpy #$0040
	bne .local2
	bra .lores2
.lores1
	cpy #$0010
	bne .local2
.lores2
	sta IO_CON_CR
	jsr adjdumpaddr
	bcs .local5				;carry to bank, exit even if we're processing a range
	jsr adjdumpaddr
	bcs .local5	
	lda IO_VIDMODE
	cmp #$09
	bne .lores3
	jsr adjdumpaddr
	bcs .local5	
	jsr adjdumpaddr
	bcs .local5	
	jsr adjdumpaddr
	bcs .local5	
	jsr adjdumpaddr
	bcs .local5	
	jsr adjdumpaddr
	bcs .local5	
	jsr adjdumpaddr
	bcs .local5	
.lores3
	bit monrange			;ranges on?
	bpl .local5
	ldy rangehigh
	cpy mondump
	bcs .local3
.local5
	stz monrange
	jmp moncmd
	
	!zone dumpcmd
dumpcmd
	sta monlast
	jsr parse_addr
	bcc .local3
	sty mondump				;if address was specified, store 16 bit y at low 16 bits of mondump address
	sty rangehigh
	bit monrange			;user asking for a range?
	bpl .local3
	jsr parse_addr			;get the remaining half of the range
	sty rangehigh
	lda #$80				;replace value in monrange since parse_addr will overwrite it
	sta monrange
	ldy rangehigh
	bne .local6
	jmp+2 monerror			;top of range can't be zero
.local6
	ldy mondump
	cpy rangehigh
	bcc .local3				;mondump must be less than rangehigh or it's a syntax error
	jmp+2 monerror
.local3
	jsr prdumpaddr
	ldy #$0000
.local2
	lda [mondump],y
	jsr+2 prhex
	lda #' '
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	iny
	lda IO_VIDMODE
	cmp #$09
	bne .lores1
	cpy #$0010
	bne .local2
	lda #' '
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'-'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #' '
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0000				;print 16 bytes as ASCII... bonus when in mode 9!
.asc2
	lda [mondump],y
	cmp #$20
	bcs .asc4
	lda #'.'				;substitute control character with a period
.asc4
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	iny
	cpy #$0010
	bne .asc2
	bra .lores2
.lores1
	cpy #$0008
	bne .local2
.lores2
	sta IO_CON_CR
	jsr adjdumpaddr
	bcs .local5				;carry to bank, exit even if we're processing a range
	lda IO_VIDMODE
	cmp #$09
	bne .lores3
	jsr adjdumpaddr
	bcs .local5
.lores3
	bit monrange			;ranges on?
	bpl .local5
	ldy rangehigh
	cpy mondump
	bcc .local5
	jmp+2 .local3
.local5
	stz monrange
	jmp moncmd
	
prhex16
	rep #$30
	txa
	sep #$20
	xba
	jsr+2 prhex
	xba
prhex
	pha
	lsr
	lsr
	lsr
	lsr
	jsr+2 prhexnib
	pla
	and #$0f
prhexnib
	ora #$30
	cmp #$3a
	bcc prhexnofix
	clc
	adc #$07
prhexnofix
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	rts

	!zone entercmd
.local1
	jmp monerror
entercmd
	jsr parse_addr
	bcc .local1			;address is mandatory
	bit monrange
	bmi .local1			;ranges not allowed
	sty enterbytes
	lda mondump_h
	sta enterbytes_h	;retrieve bank from mondump
.local2
	jsr parse_addr		;start grabbing bytes
	bcc .enterdone
	bit monrange
	bmi .local1			;stop that happening here too
	rep #$30
	tya
	sep #$20			;get low byte of parsed address into A
	sta [enterbytes]
	inc enterbytes
	bne .local3
	inc enterbytes_m
	bne .local3
	inc enterbytes_h
.local3
	bra .local2
.enterdone
	jmp moncmd
	
	!zone listcmd
listcmd
	jsr parse_addr
	bcc .listmany				;address is optional
	sty mondump
.listmany
	lda IO_VIDMODE
	cmp #$09
	bne .listmany1
	ldx #32
	bra .listmany2
.listmany1
	ldx #15
.listmany2
	phx
	jsr+2 .listsingle
	plx
	dex
	bne .listmany2
	jmp moncmd
.listsingle
	ldy #$0000
	jsr prdumpaddr
	lda #$00
	xba					;clear B
	lda [mondump]				;get opcode
	pha					;save opcode
	tax
	lda mnemlenmode,x
	lsr
	lsr
	lsr
	lsr
	lsr					;isolage opcode len
	sta scratch1
	lda [mondump]
	jsr+2 is816
	lda scratch1
	tax
	ldy #$0000
.nextbyte
	lda [mondump],y
	jsr prhex			;print hex
	lda #' '
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER	;print space
	iny
	dex
	bne .nextbyte
	lda #$16
	sta IO_CON_CURSORH	;tab over
	pla					;get opcode back
	tax
	lda mnemlist,x
	sta enterbytes
	stz enterbytes_m	;save for 16 bit add
	phx					;stash our opcode
	rep #$30
	!al
	and #$00ff			;switch to 16 bits, clear top
	asl
	clc
	adc enterbytes		;multiply by 3
	tax
	sep #$20
	!as
	lda mnems, x
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	inx
	lda mnems, x
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	inx
	lda mnems, x
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #' '
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	plx					;get our opcode back in index
	lda #$00
	xba					;clear top byte of A if it's dirty
	lda mnemlenmode,x
	and #$1f			;isolate the addressing mode
	asl					;multiply by two
	tax
	jsr (listamod,x)
	lda IO_VIDMODE
	cmp #$09
	bne .fixup1
	lda #$25
	sta IO_CON_CURSORH		;tab over and print our bytes as ASCII in 80 column mode
	sep #$30				;8 bit indexes here
	!rs
	ldy #$00				;print disassembly bytes as ASCII... bonus when in mode 9!
.asc2
	lda [mondump],y
	cmp #$20
	bcs .asc4
	lda #'.'				;substitute control character with a period
.asc4
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	iny
	cpy scratch1
	bne .asc2
.fixup1
	rep #$10
	!rl
	sta IO_CON_CR
.fixup
	lda scratch1		;get our fixup
	clc
	adc mondump
	sta mondump
	lda mondump_m
	adc #$00
	sta mondump_m
	lda mondump_h
	adc #$00
	sta mondump_h
.goback
	rts

amod0
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0001
	lda [mondump],y
	jsr prhex
	rts
amod1
	lda #'('
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0001
	lda [mondump],y
	jsr prhex
	lda #','
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'X'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #')'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	rts
amod2
	ldy #$0001
	lda [mondump],y
	jsr prhex
	lda #','
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'S'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	rts
amod3
	lda #'['
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0001
	lda [mondump],y
	jsr prhex
	lda #']'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
amod4
	rts
	!zone amod5
amod5
	lda #'#'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda scratch1
	cmp #$02
	beq .amod508
.amod516
	ldy #$0002
	lda [mondump],y
	jsr prhex
.amod508
	ldy #$0001
	lda [mondump],y
	jsr prhex
	rts
amod6
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0002
	lda [mondump],y
	jsr prhex
	dey
	lda [mondump],y
	jmp prhex
amod7
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0003
	lda [mondump],y
	jsr prhex
	dey
	lda [mondump],y
	jsr prhex
	dey
	lda [mondump],y
	jmp prhex
amod11
	ldy #$0003
	sty scratch2			;number of bytes to bump offset
	ldy #$0002
	lda [mondump],y
	xba
	dey
	lda [mondump],y
	bra amod8nosign
amod8
	ldy #$0002
	sty scratch2
	lda #$00
	xba						;clear high byte of A
amod8a
	ldy #$0001
	lda [mondump],y			;get rel byte
	bpl amod8nosign
	pha
	lda #$ff
	xba						;sign extend if negative
	pla
amod8nosign
	rep #$30
	!al
	clc
	adc mondump				;add to our current disassembly address
	clc
	adc scratch2			;add offset for instruction size
	tax
	sep #$20
	!as
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	jsr prhex16
	rts
amod9
	lda #'('
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0001
	lda [mondump],y
	jsr prhex
	lda #')'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #','
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'Y'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	rts
amoda
	lda #'('
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0001
	lda [mondump],y
	jsr prhex
	lda #')'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	rts
amodb
	lda #'('
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0001
	lda [mondump],y
	jsr prhex
	lda #','
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'S'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #')'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #','
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'Y'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	rts
amodc
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0001
	lda [mondump],y
	jsr prhex
	lda #','
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'X'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	rts
amodd
	lda #'['
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0001
	lda [mondump],y
	jsr prhex
	lda #']'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #','
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'Y'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	rts
amode
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0002
	lda [mondump],y
	jsr prhex
	dey
	lda [mondump],y
	jsr prhex
	lda #','
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'X'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	rts
amodf
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0002
	lda [mondump],y
	jsr prhex
	dey
	lda [mondump],y
	jsr prhex
	lda #','
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'Y'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	rts
amod10
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0003
	lda [mondump],y
	jsr prhex
	dey
	lda [mondump],y
	jsr prhex
	dey
	lda [mondump],y
	jsr prhex
	lda #','
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'X'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	rts
amod12
	lda #'('
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0002
	lda [mondump],y
	jsr prhex
	dey
	lda [mondump],y
	jsr prhex
	lda #')'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	rts
amod13
	lda #'('
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0002
	lda [mondump],y
	jsr prhex
	dey
	lda [mondump],y
	jsr prhex
	lda #','
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'X'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #')'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	rts
amod14
	lda #'$'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	ldy #$0001
	lda [mondump],y
	jsr prhex
	lda #','
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	lda #'Y'
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	rts
	
						;test branches for disassembly purposes..
	bvs amod14
	bvs is816
	bvs amod13
	bvs listamod
	per amod12
	per is816
	per amod10
	per listamod
	
	!zone is816
is816
	pha
	and #$1f
	cmp #$09				;09, 29, 49, etc?
	bne .testx
	bit alarge				;16 bit?
	bmi .is16
	bpl .is8
.testx
	pla
	pha
	cmp #$a0
	beq .isx
	cmp #$a2
	beq .isx
	cmp #$c0
	beq .isx
	cmp #$e0
	beq .isx
	pla						;made it here, not an accumulator or index instruction
	rts
.isx
	bit xlarge
	bmi .is16				;or else fall thru
.is8
	lda #$2
	sta scratch1
	pla
	rts
.is16
	lda #$3
	sta scratch1
	pla
	rts
	
listamod
	!16 amod0			;$xx
	!16 amod1			;($xx,X)
	!16 amod2			;x,S
	!16 amod3			;[$xx]
	!16 amod4			;implied
	!16 amod5			;#$xx (or #$yyxx)
	!16 amod6			;$yyxx
	!16 amod7			;$zzyyxx
	!16 amod8			;rel8
	!16 amod9			;($xx),Y
	!16 amoda			;($xx)
	!16 amodb			;(xx,S),Y
	!16 amodc			;$xx,X
	!16 amodd			;[$xx],Y
	!16 amode			;$yyxx,X
	!16 amodf			;$yyxx,Y
	!16 amod10			;$zzyyxx,X
	!16 amod11			;rel16
	!16 amod12			;($yyxx)
	!16 amod13			;($yyxx,X)
	!16 amod14			;$xx,Y
	
mnemlenmode
	!byte %01000000		;00 brk 2/$xx
	!byte %01000001		;01 ora 2/($xx,x)
	!byte %01000000		;02 cop 2/$xx
	!byte %01000010		;03 ora 2/x,s
	!byte %01000000		;04 tsb 2/$xx
	!byte %01000000		;05 ora 2/$xx
	!byte %01000000		;06 asl 2/$xx
	!byte %01000011		;07 ora 2/[$xx]
	!byte %00100100		;08 php 1
	!byte %01000101		;09 ora 2/#imm
	!byte %00100100		;0a asl 1
	!byte %00100100		;0b phd 1
	!byte %01100110		;0c tsb 3/$yyxx
	!byte %01100110		;0d ora 3/$yyxx
	!byte %01100110		;0e asl 3/$yyxx
	!byte %10000111		;0f ora 4/$zzyyxx
	!byte %01001000		;10 bpl 2/rel8
	!byte %01001001		;11 ora 2/($xx),Y
	!byte %01001010		;12 ora 2/($xx)
	!byte %01001011		;13 ora 2/(x,s),Y
	!byte %01000000		;14 trb 2/$xx
	!byte %01001100		;15 ora 2/$xx,X
	!byte %01001100		;16 asl 2/$xx,X
	!byte %01001101		;17 ora 2/[$xx],Y
	!byte %00100100		;18 clc 1
	!byte %01101111		;19 ora 3/$yyxx,Y
	!byte %00100100		;1a inc 1
	!byte %00100100		;1b tcs 1
	!byte %01100110		;1c trb 3/$yyxx
	!byte %01101110		;1d ora 3/$yyxx,X
	!byte %01101110		;1e asl 3/$yyxx,X
	!byte %10010000		;1f ora 4/$zzyyxx,X
	!byte %01100110		;20 jsr 3/$yyxx
	!byte %01000001		;21 and 2/($xx,x)
	!byte %10000111		;22 jsl 4/$zzyyxx
	!byte %01000010		;23 and 2/x,s
	!byte %01000000		;24 bit 2/$xx
	!byte %01000000		;25 and 2/$xx
	!byte %01000000		;26 rol 2/$xx
	!byte %01000011		;27 and 2/[$xx]
	!byte %00100100		;28 plp 1
	!byte %01000101		;29 and 2/#imm
	!byte %00100100		;2a rol 1
	!byte %00100100		;2b pld 1
	!byte %01100110		;2c bit 3/$yyxx
	!byte %01100110		;2d and 3/$yyxx
	!byte %01100110		;2e rol 3/$yyxx
	!byte %10000111		;2f and 4/$zzyyxx
	!byte %01001000		;30 bmi 2/rel8
	!byte %01001001		;31 and 2/($xx),Y
	!byte %01001010		;32 and 2/($xx)
	!byte %01001011		;33 and 2/(x,s),Y
	!byte %01001100		;34 bit 2/$xx,X
	!byte %01001100		;35 and 2/$xx,X
	!byte %01001100		;36 rol 2/$xx,X
	!byte %01001101		;37 and 2/[$xx],Y
	!byte %00100100		;38 sec 1
	!byte %01101111		;39 and 3/$yyxx,Y
	!byte %00100100		;3a dec 1
	!byte %00100100		;3b tsc 1
	!byte %01101110		;3c bit 3/$yyxx,X
	!byte %01101110		;3d and 3/$yyxx,X
	!byte %01101110		;3e rol 3/$yyxx,X
	!byte %10010000		;3f and 4/$zzyyxx,X
	!byte %00100100		;40 ???
	!byte %01000001		;41 eor 2/($xx,x)
	!byte %01000000		;42 wdm 2/$00
	!byte %01000010		;43 eor 2/x,s
	!byte %00100100		;44 ???
	!byte %01000000		;45 eor 2/$xx
	!byte %01000000		;46 lsr 2/$xx
	!byte %01000011		;47 eor 2/[$xx]
	!byte %00100100		;48 pha 1
	!byte %01000101		;49 eor 2/#imm
	!byte %00100100		;4a lsr 1
	!byte %00100100		;4b phk 1
	!byte %01100110		;4c jmp 3/$yyxx
	!byte %01100110		;4d eor 3/$yyxx
	!byte %01100110		;4e lsr 3/$yyxx
	!byte %10000111		;4f eor 4/$zzyyxx
	!byte %01001000		;50 bvc 2/rel8
	!byte %01001001		;51 eor 2/($xx),Y
	!byte %01001010		;52 eor 2/($xx)
	!byte %01001011		;53 eor 2/(x,s),Y
	!byte %00100100		;54 ???
	!byte %01001100		;55 eor 2/$xx,X
	!byte %01001100		;56 lsr 2/$xx,X
	!byte %01001101		;57 eor 2/[$xx],Y
	!byte %00100100		;58 cli 1
	!byte %01101111		;59 eor 3/$yyxx,Y
	!byte %00100100		;5a phy 1
	!byte %00100100		;5b tcd 1
	!byte %10000111		;5c jml 4/$zzyyxx
	!byte %01101110		;5d eor 3/$yyxx,X
	!byte %01101110		;5e lsr 3/$yyxx,X
	!byte %10010000		;5f eor 4/$zzyyxx,X
	!byte %00100100		;60 rts
	!byte %01000001		;61 adc 2/($xx,x)
	!byte %01110001		;62 per 3/rel16
	!byte %01000010		;63 adc 2/x,s
	!byte %01000000		;64 stz 2/$xx
	!byte %01000000		;65 adc 2/$xx
	!byte %01000000		;66 ror 2/$xx
	!byte %01000011		;67 adc 2/[$xx]
	!byte %00100100		;68 pla 1
	!byte %01000101		;69 adc 2/#imm
	!byte %00100100		;6a ror 1
	!byte %00100100		;6b rtl 1
	!byte %01110010		;6c jmp 3/($yyxx)
	!byte %01100110		;6d adc 3/$yyxx
	!byte %01100110		;6e ror 3/$yyxx
	!byte %10000111		;6f adc 4/$zzyyxx
	!byte %01001000		;70 bvs 2/rel8
	!byte %01001001		;71 adc 2/($xx),Y
	!byte %01001010		;72 adc 2/($xx)
	!byte %01001011		;73 adc 2/(x,s),Y
	!byte %01001100		;74 stz 2/$xx,X
	!byte %01001100		;75 adc 2/$xx,X
	!byte %01001100		;76 ror 2/$xx,X
	!byte %01001101		;77 adc 2/[$xx],Y
	!byte %00100100		;78 sei 1
	!byte %01101111		;79 adc 3/$yyxx,Y
	!byte %00100100		;7a ply 1
	!byte %00100100		;7b tdc 1
	!byte %01110011		;7c jmp 3/($yyxx,X)
	!byte %01101110		;7d adc 3/$yyxx,X
	!byte %01101110		;7e lsr 3/$yyxx,X
	!byte %10010000		;7f adc 4/$zzyyxx,X
	!byte %01001000		;80 bra 2/rel8
	!byte %01000001		;81 sta 2/($xx,x)
	!byte %01110001		;82 brl 3/rel16
	!byte %01000010		;83 sta 2/x,s
	!byte %01000000		;84 sty 2/$xx
	!byte %01000000		;85 sta 2/$xx
	!byte %01000000		;86 stx 2/$xx
	!byte %01000011		;87 sta 2/[$xx]
	!byte %00100100		;88 dey 1
	!byte %01000101		;89 bit 2/#imm
	!byte %00100100		;8a txa 1
	!byte %00100100		;8b phb 1
	!byte %01100110		;8c sty 3/$yyxx
	!byte %01100110		;8d sta 3/$yyxx
	!byte %01100110		;8e stx 3/$yyxx
	!byte %10000111		;8f sta 4/$zzyyxx
	!byte %01001000		;90 bcc 2/rel8
	!byte %01001001		;91 sta 2/($xx),Y
	!byte %01001010		;92 sta 2/($xx)
	!byte %01001011		;93 sta 2/(x,s),Y
	!byte %01001100		;94 sty 2/$xx,X
	!byte %01001100		;95 sta 2/$xx,X
	!byte %01010100		;96 stx 2/$xx,Y
	!byte %01001101		;97 sta 2/[$xx],Y
	!byte %00100100		;98 txa 1
	!byte %01101111		;99 sta 3/$yyxx,Y
	!byte %00100100		;9a txs 1
	!byte %00100100		;9b txy 1
	!byte %01100110		;9c stz 3/$yyxx
	!byte %01101110		;9d sta 3/$yyxx,X
	!byte %01101110		;9e stz 3/$yyxx,X
	!byte %10010000		;9f sta 4/$zzyyxx,X
	!byte %01000101		;a0 ldy 2/#imm
	!byte %01000001		;a1 lda 2/($xx,x)
	!byte %01000101		;a2 ldx 2/#imm
	!byte %01000010		;a3 lda 2/x,s
	!byte %01000000		;a4 ldy 2/$xx
	!byte %01000000		;a5 sta 2/$xx
	!byte %01000000		;a6 ldx 2/$xx
	!byte %01000011		;a7 lda 2/[$xx]
	!byte %00100100		;a8 tay 1
	!byte %01000101		;a9 lda 2/#imm
	!byte %00100100		;aa tax 1
	!byte %00100100		;ab plb 1
	!byte %01100110		;ac ldy 3/$yyxx
	!byte %01100110		;ad lda 3/$yyxx
	!byte %01100110		;ae ldx 3/$yyxx
	!byte %10000111		;af lda 4/$zzyyxx
	!byte %01001000		;b0 bcs 2/rel8
	!byte %01001001		;b1 lda 2/($xx),Y
	!byte %01001010		;b2 lda 2/($xx)
	!byte %01001011		;b3 lda 2/(x,s),Y
	!byte %01001100		;b4 ldy 2/$xx,X
	!byte %01001100		;b5 lda 2/$xx,X
	!byte %01010100		;b6 ldx 2/$xx,Y
	!byte %01001101		;b7 lda 2/[$xx],Y
	!byte %00100100		;b8 clv 1
	!byte %01101111		;b9 lda 3/$yyxx,Y
	!byte %00100100		;ba tsx 1
	!byte %00100100		;bb tyx 1
	!byte %01100110		;bc ldy 3/$yyxx
	!byte %01101110		;bd lda 3/$yyxx,X
	!byte %01101110		;be ldx 3/$yyxx,X
	!byte %10010000		;bf lda 4/$zzyyxx,X
	!byte %01000101		;c0 cpy 2/#imm
	!byte %01000001		;c1 cmp 2/($xx,x)
	!byte %01000101		;c2 rep 2/#imm
	!byte %01000010		;c3 cmp 2/x,s
	!byte %01000000		;c4 cpx 2/$xx
	!byte %01000000		;c5 cmp 2/$xx
	!byte %01000000		;c6 dec 2/$xx
	!byte %01000011		;c7 cmp 2/[$xx]
	!byte %00100100		;c8 iny 1
	!byte %01000101		;c9 cmp 2/#imm
	!byte %00100100		;ca dex 1
	!byte %00100100		;cb wai 1
	!byte %01100110		;cc cpy 3/$yyxx
	!byte %01100110		;cd cmp 3/$yyxx
	!byte %01100110		;ce dec 3/$yyxx
	!byte %10000111		;cf cmp 4/$zzyyxx
	!byte %01001000		;d0 bne 2/rel8
	!byte %01001001		;d1 cmp 2/($xx),Y
	!byte %01001010		;d2 cmp 2/($xx)
	!byte %01001011		;d3 cmp 2/(x,s),Y
	!byte %01001010		;d4 pei 2/($xx)
	!byte %01001100		;d5 cmp 2/$xx,X
	!byte %01001100		;d6 dec 2/$xx,X
	!byte %01001101		;d7 cmp 2/[$xx],Y
	!byte %00100100		;d8 cld 1
	!byte %01101111		;d9 cmp 3/$yyxx,Y
	!byte %00100100		;da phx 1
	!byte %00100100		;db stp 1
	!byte %01000011		;dc jml 2/[$xx]
	!byte %01101110		;dd cmp 3/$yyxx,X
	!byte %01101110		;de dec 3/$yyxx,X
	!byte %10010000		;df cmp 4/$zzyyxx,X
	!byte %01000101		;e0 cpx 2/#imm
	!byte %01000001		;e1 sbc 2/($xx,x)
	!byte %01000101		;e2 sep 2/#imm
	!byte %01000010		;e3 sbc 2/x,s
	!byte %01000000		;e4 cpx 2/$xx
	!byte %01000000		;e5 sbc 2/$xx
	!byte %01000000		;e6 inc 2/$xx
	!byte %01000011		;e7 sbc 2/[$xx]
	!byte %00100100		;e8 inx 1
	!byte %01000101		;e9 sbc 2/#imm
	!byte %00100100		;ea nop 1
	!byte %00100100		;eb xba 1
	!byte %01100110		;ec cpx 3/$yyxx
	!byte %01100110		;ed sbc 3/$yyxx
	!byte %01100110		;ee inc 3/$yyxx
	!byte %10000111		;ef sbc 4/$zzyyxx
	!byte %01001000		;f0 beq 2/rel8
	!byte %01001001		;f1 sbc 2/($xx),Y
	!byte %01001010		;f2 sbc 2/($xx)
	!byte %01001011		;f3 sbc 2/(x,s),Y
	!byte %01100110		;f4 pea 3/$yyxx
	!byte %01001100		;f5 sbc 2/$xx,X
	!byte %01001100		;f6 inc 2/$xx,X
	!byte %01001101		;f7 sbc 2/[$xx],Y
	!byte %00100100		;f8 sed 1
	!byte %01101111		;f9 sbc 3/$yyxx,Y
	!byte %00100100		;fa plx 1
	!byte %00100100		;fb xce 1
	!byte %01110011		;fc jsr 3/($yyxx)
	!byte %01101110		;fd sbc 3/$yyxx,X
	!byte %01101110		;fe inc 3/$yyxx,X
	!byte %10010000		;ff sbc 4/$zzyyxx,X
mnemlist
	!byte $00			;00 brk
	!byte $02			;01 ora
	!byte $01			;02 cop
	!byte $02			;03 ora
	!byte $03			;04 tsb
	!byte $02			;05 ora
	!byte $04			;06 asl
	!byte $02			;07 ora
	!byte $05			;08 php
	!byte $02			;09 ora
	!byte $04			;0a asl
	!byte $06			;0b phd
	!byte $03			;0c tsb
	!byte $02			;0d ora
	!byte $04			;0e asl
	!byte $02			;0f ora
	!byte $07			;10 bpl
	!byte $02			;11 ora
	!byte $02			;12 ora
	!byte $02			;13 ora
	!byte $08			;14 trb
	!byte $02			;15 ora
	!byte $04			;16 asl
	!byte $02			;17 ora
	!byte $09			;18 clc
	!byte $02			;19 ora
	!byte $0a			;1a inc
	!byte $0b			;1b tcs
	!byte $08			;1c trb
	!byte $02			;1d ora
	!byte $04			;1e asl
	!byte $02			;1f ora
	!byte $0d			;20 jsr
	!byte $0c			;21 and
	!byte $0e			;22 jsl
	!byte $0c			;23 and
	!byte $10			;24 bit
	!byte $0c			;25 and
	!byte $11			;26 rol
	!byte $0c			;27 and
	!byte $12			;28 plp
	!byte $0c			;29 and
	!byte $11			;2a rol
	!byte $13			;2b pld
	!byte $10			;2c bit
	!byte $0c			;2d and
	!byte $11			;2e rol
	!byte $0c			;2f and
	!byte $14			;30 bmi
	!byte $0c			;31 and
	!byte $0c			;32 and
	!byte $0c			;33 and
	!byte $11			;34 bit
	!byte $0c			;35 and
	!byte $11			;36 rol
	!byte $0c			;37 and
	!byte $15			;38 sec
	!byte $0c			;39 and
	!byte $0f			;3a dec
	!byte $16			;3b tsc
	!byte $11			;3c bit
	!byte $0c			;3d and
	!byte $11			;3e rol
	!byte $0c			;3f and
	!byte $17			;40 ???
	!byte $18			;41 eor
	!byte $19			;42 wdm
	!byte $18			;43 eor
	!byte $17			;44 ???
	!byte $18			;45 eor
	!byte $1a			;46 lsr
	!byte $18			;47 eor
	!byte $1b			;48 pha
	!byte $18			;49 eor
	!byte $1a			;4a lsr
	!byte $1c			;4b phk
	!byte $1d			;4c jmp
	!byte $18			;4d eor
	!byte $1a			;4e lsr
	!byte $18			;4f eor
	!byte $1e			;50 bvc
	!byte $18			;51 eor
	!byte $18			;52 eor
	!byte $18			;53 eor
	!byte $17			;54 ???
	!byte $18			;55 eor
	!byte $1a			;56 lsr
	!byte $18			;57 eor
	!byte $1f			;58 cli
	!byte $18			;59 eor
	!byte $20			;5a phy
	!byte $21			;5b tcd
	!byte $22			;5c jml
	!byte $18			;5d eor
	!byte $1a			;5e lsr
	!byte $18			;5f eor
	!byte $23			;60 rts
	!byte $24			;61 adc
	!byte $25			;62 per
	!byte $24			;63 adc
	!byte $26			;64 stz
	!byte $24			;65 adc
	!byte $27			;66 ror
	!byte $24			;67 adc
	!byte $28			;68 pla
	!byte $24			;69 adc
	!byte $27			;6a ror
	!byte $29			;6b rtl
	!byte $1d			;6c jmp
	!byte $24			;6d adc
	!byte $27			;6e ror
	!byte $24			;6f adc
	!byte $2a			;70 bvs
	!byte $24			;71 adc
	!byte $24			;72 adc
	!byte $24			;73 adc
	!byte $26			;74 stz
	!byte $24			;75 adc
	!byte $27			;76 ror
	!byte $24			;77 adc
	!byte $2b			;78 sei
	!byte $24			;79 adc
	!byte $2c			;7a ply
	!byte $2d			;7b tdc
	!byte $1d			;7c jmp
	!byte $24			;7d adc
	!byte $27			;7e ror
	!byte $24			;7f adc
	!byte $2e			;80 bra
	!byte $2f			;81 sta
	!byte $30			;82 brl
	!byte $2f			;83 sta
	!byte $31			;84 sty
	!byte $2f			;85 sta
	!byte $32			;86 stx
	!byte $2f			;87 sta
	!byte $33			;88 dey
	!byte $10			;89 bit
	!byte $34			;8a txa
	!byte $35			;8b phb
	!byte $31			;8c sty
	!byte $2f			;8d sta
	!byte $32			;8e stx
	!byte $2f			;8f sta
	!byte $36			;90 bcc
	!byte $2f			;91 sta
	!byte $2f			;92 sta
	!byte $2f			;93 sta
	!byte $31			;94 sty
	!byte $2f			;95 sta
	!byte $32			;96 stx
	!byte $2f			;97 sta
	!byte $37			;98 tya
	!byte $2f			;99 sta
	!byte $38			;9a txs
	!byte $39			;9b txy
	!byte $26			;9c stz
	!byte $2f			;9d sta
	!byte $26			;9e stz
	!byte $2f			;9f sta
	!byte $3c			;a0 ldy
	!byte $3a			;a1 lda
	!byte $3b			;a2 ldx
	!byte $3a			;a3 lda
	!byte $3c			;a4 ldy
	!byte $3a			;a5 lda
	!byte $3b			;a6 ldx
	!byte $3a			;a7 lda
	!byte $3d			;a8 tay
	!byte $3a			;a9 lda
	!byte $3e			;aa tax
	!byte $3f			;ab plb
	!byte $3c			;ac ldy
	!byte $3a			;ad lda
	!byte $3b			;ae ldx
	!byte $3a			;af lda
	!byte $40			;b0 bcs
	!byte $3a			;b1 lda
	!byte $3a			;b2 lda
	!byte $3a			;b3 lda
	!byte $3c			;b4 ldy
	!byte $3a			;b5 lda
	!byte $3b			;b6 ldx
	!byte $3a			;b7 lda
	!byte $41			;b8 clv
	!byte $3a			;b9 lda
	!byte $42			;ba tsx
	!byte $43			;bb tyx
	!byte $3c			;bc ldy
	!byte $3a			;bd lda
	!byte $3b			;be ldx
	!byte $3a			;bf lda
	!byte $46			;c0 cpy
	!byte $44			;c1 cmp
	!byte $47			;c2 rep
	!byte $44			;c3 cmp
	!byte $46			;c4 cpy
	!byte $44			;c5 cmp
	!byte $48			;c6 dec
	!byte $44			;c7 cmp
	!byte $49			;c8 iny
	!byte $44			;c9 cmp
	!byte $4a			;ca dex
	!byte $4b			;cb wai
	!byte $46			;cc cpy
	!byte $44			;cd cmp
	!byte $48			;ce dec
	!byte $44			;cf cmp
	!byte $4c			;d0 bne
	!byte $44			;d1 cmp
	!byte $44			;d2 cmp
	!byte $44			;d3 cmp
	!byte $4d			;d4 pei
	!byte $44			;d5 cmp
	!byte $48			;d6 dec
	!byte $44			;d7 cmp
	!byte $4e			;d8 cld
	!byte $44			;d9 cmp
	!byte $4f			;da phx
	!byte $50			;db stp
	!byte $22			;dc jml
	!byte $44			;dd cmp
	!byte $48			;de dec
	!byte $44			;df cmp
	!byte $51			;e0 cpx
	!byte $45			;e1 sbc
	!byte $52			;e2 sep
	!byte $45			;e3 sbc
	!byte $51			;e4 cpx
	!byte $45			;e5 sbc
	!byte $53			;e6 inc
	!byte $45			;e7 sbc
	!byte $54			;e8 inx
	!byte $45			;e9 sbc
	!byte $55			;ea nop
	!byte $56			;eb xba
	!byte $51			;ec cpx
	!byte $45			;ed sbc
	!byte $53			;ee inc
	!byte $45			;ef sbc
	!byte $57			;f0 beq
	!byte $45			;f1 sbc
	!byte $45			;f2 sbc
	!byte $45			;f3 sbc
	!byte $58			;f4 pea
	!byte $45			;f5 sbc
	!byte $53			;f6 inc
	!byte $45			;f7 sbc
	!byte $59			;f8 sed
	!byte $45			;f9 sbc
	!byte $5a			;fa plx
	!byte $5b			;fb xce
	!byte $0d			;fc jsr
	!byte $45			;fd sbc
	!byte $53			;fe inc
	!byte $45			;ff sbc
mnems
	!tx "BRK"			;0
	!tx "COP"			;1
	!tx "ORA"			;2
	!tx "TSB"			;3
	!tx "ASL"			;4
	!tx "PHP"			;5
	!tx "PHD"			;6
	!tx "BPL"			;7
	!tx "TRB"			;8
	!tx "CLC"			;9
	!tx "INC"			;a
	!tx "TCS"			;b
	!tx "AND"			;c
	!tx "JSR"			;d
	!tx "JSL"			;e
	!tx "DEC"			;f
	!tx "BIT"			;10
	!tx "ROL"			;11
	!tx "PLP"			;12
	!tx "PLD"			;13
	!tx "BMI"			;14
	!tx "SEC"			;15
	!tx "TSC"			;16
	!tx "???"			;17
	!tx "EOR"			;18
	!tx "WDM"			;19
	!tx "LSR"			;1a
	!tx "PHA"			;1b
	!tx "PHK"			;1c
	!tx "JMP"			;1d
	!tx "BVC"			;1e
	!tx "CLI"			;1f
	!tx "PHY"			;20
	!tx "TCD"			;21
	!tx "JML"			;22
	!tx "RTS"			;23
	!tx "ADC"			;24
	!tx "PER"			;25
	!tx "STZ"			;26
	!tx "ROR"			;27
	!tx "PLA"			;28
	!tx "RTL"			;29
	!tx "BVS"			;2a
	!tx "SEI"			;2b
	!tx "PLY"			;2c
	!tx "TDC"			;2d
	!tx "BRA"			;2e
	!tx "STA"			;2f
	!tx "BRL"			;30
	!tx "STY"			;31
	!tx "STX"			;32
	!tx "DEY"			;33
	!tx "TXA"			;34
	!tx "PHB"			;35
	!tx "BCC"			;36
	!tx "TYA"			;37
	!tx "TXS"			;38
	!tx "TXY"			;39
	!tx "LDA"			;3a
	!tx "LDX"			;3b
	!tx "LDY"			;3c
	!tx "TAY"			;3d
	!tx "TAX"			;3e
	!tx "PLB"			;3f
	!tx "BCS"			;40
	!tx "CLV"			;41
	!tx "TSX"			;42
	!tx "TYX"			;43
	!tx "CMP"			;44
	!tx "SBC"			;45
	!tx "CPY"			;46
	!tx "REP"			;47
	!tx "DEC"			;48
	!tx "INY"			;49
	!tx "DEX"			;4a
	!tx "WAI"			;4b
	!tx "BNE"			;4c
	!tx "PEI"			;4d
	!tx "CLD"			;4e
	!tx "PHX"			;4f
	!tx "STP"			;50
	!tx "CPX"			;51
	!tx "SEP"			;52
	!tx "INC"			;53
	!tx "INX"			;54
	!tx "NOP"			;55
	!tx "XBA"			;56
	!tx "BEQ"			;57
	!tx "PEA"			;58
	!tx "SED"			;59
	!tx "PLX"			;5a
	!tx "XCE"			;5b
	
	!zone ucline
ucline					;convert inbuff at $170400 to upper case
	php
	rep #$10
	sep #$20
	!as
	!rl
	ldx #$0000
.local2
	lda inbuff,x
	beq .local4			;hit the zero, so bail
	cmp #'a'
	bcc .local3			;less then lowercase a, so ignore
	cmp #'z' + 1		;less than next character after lowercase z?
	bcs .local3			;greater than or equal, so ignore
	sec
	sbc #('z' - 'Z')	;make upper case
	sta inbuff,x
.local3
	inx
	bra .local2
.local4
	plp
	rtl
	
	!zone getline
getline
	php
	rep #$10
	sep #$20
	!as
	!rl
	ldx #$0000
.local2
	lda IO_KEYQ_SIZE
	beq .local2
	lda IO_KEYQ_WAITING
	sta IO_KEYQ_DEQUEUE
	cmp #$0d			;carriage return yet?
	beq .local3
	cmp #$08			;backspace/back arrow?
	beq .local4
	cmp #$20 			;generally any control character besides what we're specifically looking for?
	bcc .local2		 		;yes, so ignore it
	sta inbuff,x 		;any other character, so register it and store it
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	inx
	lda #$0d			;tee up a CR just in case we have to fall thru below
	cpx #$3fe			;overrun end of buffer yet?
	bne .local2			;no, so get another char.. otherwise fall thru
.local3
	sta inbuff,x		;store CR
	sta IO_CON_CR
	inx
	lda #$00			;store zero to end it all
	sta inbuff,x
	plp
	rtl
.local4
	cpx #$0000
	beq .local2			;no data in buffer yet, so nothing to backspace over
	lda #$08
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER	;print backspace char, which backs up the cursor
	lda #$20
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER	;blot out the character with a space
	lda #$08
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER	;print backspace char again since we advanced the cursor
	dex
	bra .local2
	
prinbuff				;feed location of input buffer into dpla and then print
	php
	rep #$10
	sep #$20
	!as
	!rl
	lda #$17
	sta dpla_h
	lda #$04
	sta dpla_m
	stz dpla
	jsl l_prcdpla
	plp
	rtl
	
	!zone prcdpla
prcdpla					; print C string pointed to by dp locations $3d-$3f
	php
	rep #$10
	sep #$20
	!as
	!rl
	ldy #$0000
.local2
	lda [dpla],y
	beq .local3
	sta IO_CON_CHAROUT
	sta IO_CON_REGISTER
	iny
	bra .local2
.local3
	plp
	rtl

initstring
	!tx "IML 65816 1C Firmware v00"
	!byte 0x0d
	!tx "System Monitor"
	!byte 0x0d
	!byte 0x0d
	!byte 0

helpmsg
	!tx "IML 65816 Monitor Commands"
	!byte $0d
	!tx "A <addr>  Dump ASCII"
	!byte $0d
	!tx "B <bank>  Change bank"
	!byte $0d
	!tx "C <color> Change terminal colors"
	!byte $0d
	!tx "D <addr>  Dump hex"
	!byte $0d
	!tx "E <addr> <byte> <byte>...  Enter bytes"
	!byte $0d
	!tx "L <addr>  Disassemble 65816 Instructions"
	!byte $0d
	!tx "M <mode>  Change video mode, 8/9"
	!byte $0d
	!tx "Q         Halt the processor"
	!byte $0d
	!tx "?         This menu"
	!byte $0d
	!tx "<enter>   Repeat last dump command"
	!byte $0d
	!tx "To specify range, use <addr1.addr2>"
	!byte $0d, 00
	
!align $ffff, $ffff,$00	;fill up to top of memory

